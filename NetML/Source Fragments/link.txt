    // set the origin and destination of link L
    NS_LOG_INFO("Creating topology");
    linknodes = new NodeContainer();

<%%nodes%%>

    pointToPoint.SetDeviceAttribute("DataRate", StringValue("<%%dataRate%%>"));
    pointToPoint.SetChannelAttribute("Delay", StringValue("<%%delay%%>"));

    EnumValue <%%linkName%%>qMode = <%%linkMode%%>;

    UintegerValue <%%linkName%%>bufferSize = <%%bufferSize%%>;

<%%queue%%>

    devices = new NetDeviceContainer();
    devices->Add(pointToPoint.Install(*linknodes));
<%%devices%%>
    address.SetBase("<%%ipAddress%%>", "<%%ipMask%%>");
    linkinterfaces = new Ipv4InterfaceContainer();
    linkinterfaces->Add(address.Assign(*devices));
    ifkount = 0;   // in case we repeat this code
    myaddr = net.N<%%startNode%%>->GetObject<Ipv4MyAddress>();
    if (!myaddr)
    {
        myaddr = CreateObject<Ipv4MyAddress>();
        myaddr->setAddr(linkinterfaces->GetAddress(ifkount));
        net.N<%%startNode%%>->AggregateObject(myaddr);
        NS_LOG_INFO("N<%%startNode%%> has IP address " << myaddr->getAddr());
    }
    ifkount++;
    myaddr = net.N<%%endNode%%>->GetObject<Ipv4MyAddress>();
    if (!myaddr)
    {
        myaddr = CreateObject<Ipv4MyAddress>();
        myaddr->setAddr(linkinterfaces->GetAddress(ifkount));
        net.N<%%endNode%%>->AggregateObject(myaddr);
        NS_LOG_INFO("N<%%endNode%%> has IP address " << myaddr->getAddr());
    }
    ifkount++;

    UintegerValue <%%linkName%%>_Mtu_in_bytes = <%%mtu%%>;
    UintegerValue <%%linkName%%>_<%%bufferType%%> = <%%bufferSize%%>;
    UintegerValue <%%linkName%%>_MeanPktSize = <%%meanPacketSize%%>;
    UintegerValue <%%linkName%%>_IdlePktSize = <%%idlePacketSize%%>;
    BooleanValue <%%linkName%%>_Gentle = <%%gentle%%>;
    BooleanValue <%%linkName%%>_Wait = <%%wait%%>;
    DoubleValue <%%linkName%%>_QW = <%%QW%%>;
    DoubleValue <%%linkName%%>_LInterm = <%%lInterm%%>;
    DataRateValue <%%linkName%%>_LinkBandwidth;
    if (!<%%linkName%%>_LinkBandwidth.DeserializeFromString(std::string("<%%linkBandwidth%%>"), 0))
    {
        NS_LOG_ERROR("Invalid value: <%%linkBandwidth%%> specified for parameter LinkBandwidth of object net.L<%%linkName%%>");
    }
    TimeValue <%%linkName%%>_LinkDelay;
    if (!<%%linkName%%>_LinkDelay.DeserializeFromString(std::string("<%%linkDelay%%>"), 0))
    {
        NS_LOG_ERROR("Invalid value: <%%linkBandwidth%%> specified for parameter LinkBandwidth of object net.L<%%linkName%%>");
    }
    EnumValue <%%linkName%%>_Mode = <%%linkMode%%>;
    DoubleValue <%%linkName%%>_MinTh = <%%minTh%%>;
    DoubleValue <%%linkName%%>_MaxTh = <%%maxTh%%>;
    
    // Why not add a second set of reversed values so I can be lazier.
    UintegerValue <%%linkName%%>_rev_Mtu_in_bytes = <%%mtu%%>;
    UintegerValue <%%linkName%%>_rev_<%%bufferType%%> = <%%bufferSize%%>;
    UintegerValue <%%linkName%%>_rev_MeanPktSize = <%%meanPacketSize%%>;
    UintegerValue <%%linkName%%>_rev_IdlePktSize = <%%idlePacketSize%%>;
    BooleanValue <%%linkName%%>_rev_Gentle = <%%gentle%%>;
    BooleanValue <%%linkName%%>_rev_Wait = <%%wait%%>;
    DoubleValue <%%linkName%%>_rev_QW = <%%QW%%>;
    DoubleValue <%%linkName%%>_rev_LInterm = <%%lInterm%%>;
    DataRateValue <%%linkName%%>_rev_LinkBandwidth;
    if (!<%%linkName%%>_rev_LinkBandwidth.DeserializeFromString(std::string("<%%linkBandwidth%%>"), 0))
    {
        NS_LOG_ERROR("Invalid value: <%%linkBandwidth%%> specified for parameter LinkBandwidth of object net.L<%%linkName%%>");
    }
    TimeValue <%%linkName%%>_rev_LinkDelay;
    if (!<%%linkName%%>_rev_LinkDelay.DeserializeFromString(std::string("<%%linkDelay%%>"), 0))
    {
        NS_LOG_ERROR("Invalid value: <%%linkBandwidth%%> specified for parameter LinkBandwidth of object net.L<%%linkName%%>");
    }
    EnumValue <%%linkName%%>_rev_Mode = <%%linkMode%%>;
    DoubleValue <%%linkName%%>_rev_MinTh = <%%minTh%%>;
    DoubleValue <%%linkName%%>_rev_MaxTh = <%%maxTh%%>;
    
    // NS_LOG_INFO("About to look for an object of type PointToPointNetDevice within the object net.L<%%linkName%%>");

<%%linkAttributes%%>
