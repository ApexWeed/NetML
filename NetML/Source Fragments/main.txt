int main(int argc, char *argv[])
{
    umask(011);
    ConfigStore inputConfig;
    inputConfig.ConfigureDefaults();

    bool printMyAtts = <%%printAtts%%>;
    bool asciiTrace = <%%asciiTrace%%>;

    std::string netname = "<%%networkName%%>";
<%%openTracing%%>

<%%componentLog%%>

    CommandLine cmd;
    cmd.AddValue("PrintMyAttributes", "Print the attributes of the network elements in this simulation", printMyAtts);
    cmd.AddValue("NetworkName", "Set the name of the network", netname);
    cmd.Parse(argc, argv);

    /* Now for the stuff from the netml */
    InternetStackHelper stack;
    NodeContainer* nodes = new NodeContainer();
    NS_LOG_INFO("Creating nodes");
    Ptr<Node> nodeptr; nodeptr = 0;
    Ptr<Object> nodeob;
    nodeob = 0;
    int ifkount;

<%%nodes%%>
    stack.Install(*nodes);

    Ipv4AddressHelper address;
    Ptr<Ipv4MyAddress> myaddr;

    if (printMyAtts)
    {
        attsfile.open("<%%networkName%%>_attributes.txt");
    }

    PointToPointHelper pointToPoint;
    Ptr<Object> linkob, linkob_rev;
    linkob = 0, linkob_rev = 0;

    /*   /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\ Point-to-point links, one by one /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\  */
    /* Links
    */
<%%links%%>
    /*   \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\ Point-to-point links, one by one /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/  */

    /*   \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/ Declare Traffic/Applications \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/  */
    /* Streams
    */
<%%streams%%>
    /*   \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/ Finished Declaring Traffic/Applications \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/  */

<%%domains%%>

    NS_LOG_UNCOND("Populate routing tables.");
    Ipv4GlobalRoutingHelper::PopulateRoutingTables();
    Simulator::Stop(Seconds(<%%stopTime%%>));
    AsciiTraceHelper ascii;
    NS_LOG_UNCOND("About to set schedule printing of attributes, if requested.");
    if (asciiTrace)
    {
        pointToPoint.EnableAsciiAll(ascii.CreateFileStream("<%%networkName%%>_trace.txt", std::ios_base::out));
    }

    if (printMyAtts)
    {
        Simulator::Schedule(Seconds(<%%observationTime%%>), &showatts);
    }
    NS_LOG_UNCOND("About to set up tracing (if requested).");
    Simulator::Schedule(Seconds(<%%observationTime%%>), &setupCommonTraces);

    // Simulator::Schedule(Seconds(5),&ReadElementStats, clrtrs.Get (0)->GetObject<Ipv4ClickRouting> ());
    NS_LOG_UNCOND("Now run the simulation.");
    Simulator::Run();
<%%closeTracing%%>

    NS_LOG_UNCOND("Simulation complete.");
    std::cerr << "Simulation complete." << std::endl;
    Simulator::Destroy();
    return 0;
}
